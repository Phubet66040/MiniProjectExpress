import React, { useEffect, useState } from "react";
import { MapContainer, TileLayer, Polyline, Marker, Popup } from "react-leaflet";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

// ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ icon ‡∏´‡∏≤‡∏¢‡πÉ‡∏ô leaflet + React
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
    iconRetinaUrl:
        "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/marker-icon-2x.png",
    iconUrl:
        "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/marker-icon.png",
    shadowUrl:
        "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/images/marker-shadow.png",
});

const BANGKOK = [13.7367, 100.5132];

const routes = {
    ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: [
        BANGKOK,
        [15.0013, 100.1181], // ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£
        [15.7036, 100.1367], // ‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå
        [16.4627, 99.5126], // ‡∏ï‡∏≤‡∏Å
        [17.379, 99.8987], // ‡πÅ‡∏°‡πà‡∏™‡∏≠‡∏î
        [17.8937, 99.8347], // ‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å
        [18.2923, 99.4927], // ‡∏•‡∏≥‡∏õ‡∏≤‡∏á
        [18.7877, 98.9931], // ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
        [19.91, 99.8257], // ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢
    ],
    ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô: [
        BANGKOK,
        [15.1208, 104.3297], // ‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©
        [15.82, 104.6171], // ‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ
        [16.4344, 103.5058], // ‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î
        [17.4156, 102.7859], // ‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
        [17.4763, 102.8292], // ‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ
        [17.8868, 102.76], // ‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢
    ],
    ‡πÉ‡∏ï‡πâ: [
        BANGKOK,
        [12.5652, 99.9572], // ‡∏´‡∏±‡∏ß‡∏´‡∏¥‡∏ô
        [11.8317, 99.6947], // ‡∏Å‡∏∏‡∏¢‡∏ö‡∏∏‡∏£‡∏µ
        [11.8207, 99.8827], // ‡∏ó‡∏±‡∏ö‡∏™‡∏∞‡πÅ‡∏Å
        [11.7033, 99.7952], // ‡∏ö‡∏≤‡∏á‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
        [11.8176, 99.9028], // ‡∏ö‡∏≤‡∏á‡∏™‡∏∞‡∏û‡∏≤‡∏ô
        [11.7884, 99.8951], // ‡∏™‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏¢‡∏¢‡∏≠‡∏î
        [11.7821, 99.9178], // ‡∏õ‡∏£‡∏≤‡∏ì‡∏ö‡∏∏‡∏£‡∏µ
        [9.9548, 98.5842], // ‡∏Å‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ
        [9.6635, 98.6294], // ‡∏•‡∏∞‡∏≠‡∏∏‡πà‡∏ô
        [8.1521, 98.7507], // ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡∏•‡∏≠‡∏á
        [7.9986, 99.1325], // ‡∏Ñ‡∏•‡∏≠‡∏á‡∏ó‡πà‡∏≠‡∏°
        [7.6925, 98.9872], // ‡∏≠‡πà‡∏≤‡∏ß‡∏•‡∏∂‡∏Å
        [7.6411, 99.1243], // ‡∏õ‡∏•‡∏≤‡∏¢‡∏û‡∏£‡∏∞‡∏¢‡∏≤
        [7.4711, 98.9730], // ‡∏•‡∏≥‡∏ó‡∏±‡∏ö
        [8.0192, 99.3102], // ‡πÄ‡∏Ç‡∏≤‡∏û‡∏ô‡∏°
        [7.8954, 98.3313], // ‡∏Å‡∏∞‡∏ó‡∏π‡πâ
        [7.9780, 98.3294], // ‡∏ñ‡∏•‡∏≤‡∏á
        [8.4234, 98.4757], // ‡∏ï‡∏∞‡∏Å‡∏±‡πà‡∏ß‡∏ó‡∏∏‡πà‡∏á
        [8.5846, 98.4398], // ‡∏ï‡∏∞‡∏Å‡∏±‡πà‡∏ß‡∏õ‡πà‡∏≤
        [8.5176, 98.3265], // ‡∏Ñ‡∏∏‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ
        [8.4943, 98.3958], // ‡∏ó‡∏±‡∏ö‡∏õ‡∏∏‡∏î
        [8.5981, 99.7656], // ‡∏Ç‡∏ô‡∏≠‡∏°
        [8.4518, 99.9707], // ‡∏ó‡∏∏‡πà‡∏á‡∏™‡∏á
        [8.4307, 99.9926], // ‡∏ó‡πà‡∏≤‡∏®‡∏≤‡∏•‡∏≤
        [8.4037, 99.9315], // ‡∏õ‡∏≤‡∏Å‡∏û‡∏ô‡∏±‡∏á
        [8.4612, 99.9165], // ‡∏ä‡∏∞‡∏≠‡∏ß‡∏î
        [8.4553, 99.9106], // ‡∏£‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏ö‡∏π‡∏•‡∏¢‡πå
        [8.4437, 99.9597], // ‡∏™‡∏¥‡∏ä‡∏•
        [8.3914, 99.9561], // ‡∏´‡∏±‡∏ß‡πÑ‡∏ó‡∏£
        [8.3276, 99.9326], // ‡∏ó‡∏∏‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà
        [8.4664, 99.9363], // ‡∏ñ‡πâ‡∏≥‡∏û‡∏£‡∏£‡∏ì
        [8.4011, 99.9310], // ‡∏ô‡∏≤‡∏ö‡∏≠‡∏ô
        [8.3908, 99.9378], // ‡∏à‡∏∏‡∏¨‡∏≤‡∏†‡∏£‡∏ì‡πå
        [7.5413, 100.0824], // ‡∏ö‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡∏ß
        [7.5072, 100.0127], // ‡∏Ñ‡∏ß‡∏ô‡∏Ç‡∏ô‡∏∏‡∏ô
        [7.6191, 100.0177], // ‡∏õ‡πà‡∏≤‡∏û‡∏¢‡∏≠‡∏°
        [7.4847, 100.1694], // ‡πÄ‡∏Ç‡∏≤‡∏ä‡∏±‡∏¢‡∏™‡∏ô
        [7.4732, 100.1295], // ‡∏õ‡πà‡∏≤‡∏ö‡∏≠‡∏ô
        [6.9035, 101.2504], // ‡∏™‡∏≤‡∏¢‡∏ö‡∏∏‡∏£‡∏µ
        [6.5416, 101.2803], // ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏¢‡∏∞‡∏•‡∏≤
        [6.9886, 101.1169], // ‡∏ï‡∏≤‡∏Å‡πÉ‡∏ö
        [6.9600, 101.1340], // ‡∏ö‡∏≤‡πÄ‡∏à‡∏≤‡∏∞
        [6.5683, 101.2520], // ‡∏™‡∏∏‡πÑ‡∏´‡∏á‡πÇ‡∏Å‡∏•‡∏Å
    ],
};

const colors = {
    ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: "#6366f1",
    ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô: "#059669",
    ‡πÉ‡∏ï‡πâ: "#dc2626",
};

const routeInfo = {
    ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: { name: "‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠", emoji: "üèîÔ∏è", bgColor: "bg-indigo-50", textColor: "text-indigo-700" },
    ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô: { name: "‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô", emoji: "üåæ", bgColor: "bg-emerald-50", textColor: "text-emerald-700" },
    ‡πÉ‡∏ï‡πâ: { name: "‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ", emoji: "üèùÔ∏è", bgColor: "bg-red-50", textColor: "text-red-700" },
};

const createColoredIcon = (color) =>
    new L.DivIcon({
        html: `<div style="
            background-color: ${color};
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.25);
        "></div>`,
        className: "",
        iconSize: [20, 20],
        iconAnchor: [10, 10],
    });

// interpolate ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î
function interpolate(start, end, factor) {
    const lat = start[0] + (end[0] - start[0]) * factor;
    const lng = start[1] + (end[1] - start[1]) * factor;
    return [lat, lng];
}

const MapView = () => {
    const [vehicles, setVehicles] = useState({
        ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: { segmentIndex: 0, progress: 0, forward: true, currentPos: BANGKOK },
        ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô: { segmentIndex: 0, progress: 0, forward: true, currentPos: BANGKOK },
        ‡πÉ‡∏ï‡πâ: { segmentIndex: 0, progress: 0, forward: true, currentPos: BANGKOK },
    });

    useEffect(() => {
        const interval = setInterval(() => {
            setVehicles((prev) => {
                const newVehicles = { ...prev };
                Object.keys(routes).forEach((routeName) => {
                    const route = routes[routeName];
                    const vehicle = newVehicles[routeName];

                    let newProgress = vehicle.progress + 0.015; // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                    let newSegmentIndex = vehicle.segmentIndex;
                    let newForward = vehicle.forward;

                    if (newProgress >= 1) {
                        newProgress = 0;
                        if (newForward) {
                            newSegmentIndex++;
                            if (newSegmentIndex >= route.length - 1) {
                                newForward = false;
                                newSegmentIndex = route.length - 2;
                            }
                        } else {
                            newSegmentIndex--;
                            if (newSegmentIndex < 0) {
                                newForward = true;
                                newSegmentIndex = 0;
                            }
                        }
                    }

                    const startPoint = route[newSegmentIndex];
                    const endPoint = route[newSegmentIndex + (newForward ? 1 : -1)] || startPoint;
                    const currentPos = interpolate(startPoint, endPoint, newProgress);

                    newVehicles[routeName] = {
                        segmentIndex: newSegmentIndex,
                        progress: newProgress,
                        forward: newForward,
                        currentPos,
                    };
                });
                return newVehicles;
            });
        }, 50);

        return () => clearInterval(interval);
    }, []);

    return (
        <div className="w-full h-screen flex flex-col bg-gradient-to-br from-slate-50 to-gray-100">
            {/* Header */}
            <div className="bg-white shadow-lg border-b border-gray-200">
                <div className="max-w-7xl mx-auto px-4 py-4">
                    <div className="flex items-center justify-between">
                        <div>
                            <h1 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
                                üöö ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á
                            </h1>
                            <p className="text-gray-600 text-sm mt-1">
                                ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
                            </p>
                        </div>
                        <div className="flex gap-4">
                            {Object.entries(routeInfo).map(([key, info]) => (
                                <div key={key} className="flex items-center gap-2 text-sm">
                                    <div 
                                        className="w-4 h-4 rounded-full border-2 border-white shadow-sm"
                                        style={{ backgroundColor: colors[key] }}
                                    ></div>
                                    <span className="font-medium text-gray-700">
                                        {info.emoji} {info.name}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex">
                {/* Map Container */}
                <div className="flex-1 p-4">
                    <div className="bg-white rounded-xl shadow-lg overflow-hidden h-full">
                        <MapContainer
                            center={BANGKOK}
                            zoom={6}
                            scrollWheelZoom={true}
                            style={{ height: "100%", width: "100%" }}
                            className="rounded-xl"
                        >
                            <TileLayer
                                attribution='&copy; <a href="https://osm.org/copyright">OpenStreetMap</a>'
                                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                            />

                            {/* ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏¢ */}
                            {Object.entries(routes).map(([routeName, route]) => (
                                <Polyline
                                    key={routeName}
                                    positions={route}
                                    color={colors[routeName]}
                                    weight={5}
                                    dashArray="10 5"
                                    opacity={0.8}
                                />
                            ))}

                            {/* ‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏¢ */}
                            {Object.entries(routes).map(([routeName, route]) =>
                                route.map((pos, idx) => (
                                    <Marker
                                        key={`${routeName}-${idx}`}
                                        position={pos}
                                        icon={createColoredIcon(colors[routeName])}
                                    >
                                        <Popup className="font-thai">
                                            <div className="text-center">
                                                <div className="font-semibold text-gray-800">
                                                    {routeInfo[routeName].emoji} {routeInfo[routeName].name}
                                                </div>
                                                <div className="text-sm text-gray-600 mt-1">
                                                    ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà {idx + 1} ‡∏à‡∏≤‡∏Å {route.length}
                                                </div>
                                                <div className="text-xs text-gray-500 mt-1">
                                                    {pos[0].toFixed(4)}, {pos[1].toFixed(4)}
                                                </div>
                                            </div>
                                        </Popup>
                                    </Marker>
                                ))
                            )}

                            {/* ‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏¢ */}
                            {Object.entries(vehicles).map(([routeName, vehicle]) => (
                                <Marker
                                    key={`vehicle-${routeName}`}
                                    position={vehicle.currentPos}
                                    icon={
                                        new L.DivIcon({
                                            html: `<div style="
                                                font-size: 28px; 
                                                color: ${colors[routeName]};
                                                filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3));
                                                transform: ${vehicle.forward ? 'rotate(0deg)' : 'rotate(180deg)'};
                                            ">üöö</div>`,
                                            className: "",
                                            iconSize: [28, 28],
                                            iconAnchor: [14, 14],
                                        })
                                    }
                                >
                                    <Popup className="font-thai">
                                        <div className="text-center">
                                            <div className="font-semibold text-gray-800">
                                                üöö ‡∏£‡∏ñ‡∏™‡∏≤‡∏¢{routeInfo[routeName].name}
                                            </div>
                                            <div className="text-sm text-gray-600 mt-1">
                                                ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà {vehicle.segmentIndex + 1} ‡∏à‡∏≤‡∏Å {routes[routeName].length}
                                            </div>
                                            <div className="text-sm text-gray-600">
                                                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {Math.round(vehicle.progress * 100)}%
                                            </div>
                                            <div className="text-xs font-medium mt-1" style={{ color: colors[routeName] }}>
                                                {vehicle.forward ? "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á" : "üîô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö"}
                                            </div>
                                        </div>
                                    </Popup>
                                </Marker>
                            ))}
                        </MapContainer>
                    </div>
                </div>

                {/* Status Panel */}
                <div className="w-80 p-4">
                    <div className="bg-white rounded-xl shadow-lg h-full overflow-y-auto">
                        <div className="p-6">
                            <h2 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                                üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                            </h2>
                            <div className="space-y-4">
                                {Object.entries(vehicles).map(([routeName, vehicle]) => {
                                    const route = routes[routeName];
                                    const currentStop = vehicle.segmentIndex + 1;
                                    const totalStops = route.length;
                                    const info = routeInfo[routeName];

                                    return (
                                        <div
                                            key={routeName}
                                            className={`${info.bgColor} p-4 rounded-xl border border-gray-200 hover:shadow-md transition-shadow`}
                                        >
                                            <div className="flex items-center justify-between mb-3">
                                                <div className="flex items-center gap-2">
                                                    <span className="text-xl">{info.emoji}</span>
                                                    <h3 className={`font-semibold ${info.textColor}`}>
                                                        {info.name}
                                                    </h3>
                                                </div>
                                                <div className="text-right">
                                                    <div className="text-2xl">
                                                        {vehicle.forward ? "üîÑ" : "üîô"}
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div className="space-y-3">
                                                <div className="flex justify-between items-center">
                                                    <span className="text-sm font-medium text-gray-700">
                                                        ‡∏´‡∏¢‡∏∏‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                                                    </span>
                                                    <span className={`font-bold ${info.textColor}`}>
                                                        {currentStop}/{totalStops}
                                                    </span>
                                                </div>
                                                
                                                <div className="flex justify-between items-center">
                                                    <span className="text-sm font-medium text-gray-700">
                                                        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                                                    </span>
                                                    <span className={`font-bold ${info.textColor}`}>
                                                        {Math.round(vehicle.progress * 100)}%
                                                    </span>
                                                </div>
                                                
                                                <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                                                    <div
                                                        className="h-3 rounded-full transition-all duration-300 ease-out"
                                                        style={{
                                                            width: `${vehicle.progress * 100}%`,
                                                            backgroundColor: colors[routeName],
                                                        }}
                                                    ></div>
                                                </div>
                                                
                                                <div className="flex items-center gap-2">
                                                    <div 
                                                        className="w-2 h-2 rounded-full animate-pulse"
                                                        style={{ backgroundColor: colors[routeName] }}
                                                    ></div>
                                                    <span className="text-xs text-gray-600">
                                                        {vehicle.forward ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢" : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default MapView;